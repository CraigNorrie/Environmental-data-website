carbchem %>% filter(Site == "Thorndyke") %>% select(-c(1,2)) %>%  arrange(Year, Month)
---
output: html_document
# Chunk 1
#Load the packages required for this
library(tidyverse)
library(leaflet)#package to make interactive web
library(leaflet.providers)#allows you to add third party basemaps
library(here)
library(plotly)
library(htmltools)
# Chunk 2
###Create the map
#Read in site info
siteinfo <- read.csv(here("Site_info.csv"))
#Create the map - in the future set all of the variables in a csv to be read in
aquaculturemap <- leaflet() %>%
addProviderTiles(providers$Esri.OceanBasemap) %>%
addMarkers(lng = siteinfo$Long, lat = siteinfo$Lat,
popup = lapply(seq(nrow(siteinfo)), function(i) {
HTML(paste0("<strong>", siteinfo$Site_name[i], "</strong><br>",
"Availble data: ", siteinfo$Data[i], "<br>",
"Organisation: ", siteinfo$Organisation[i], "<br>",
"Contact: ", siteinfo$Contact[i]))
}))
# Chunk 3
aquaculturemap
# Chunk 4
#Create averages
##read in the data
allthorndat <- read.csv(here("Data","thorn_Do_Temp.csv"))
allcheldat <- read.csv(here("Data","chelsea_Do_Temp.csv"))
allhooddat <- read.csv(here("Data","hood_Do_Temp.csv"))
allmandat <- read.csv(here("Data","man_Do_Temp.csv"))
#Set the first column as date
allthorndat$datetime <- mdy_hm(allthorndat$Date.Time..GMT.07.00)
allcheldat$datetime  <- mdy_hm(allcheldat$Date.Time..GMT.07.00)
allhooddat$datetime  <- mdy_hm(allhooddat$Date.Time..GMT.07.00)
allmandat$datetime  <- mdy_hm(allmandat$Date.Time..GMT.07.00)
#add a site columin to each of the DFs
allcheldat <- allcheldat %>% mutate(Site = "Chelsea")
allthorndat <- allthorndat %>% mutate(Site = "Thorndyke")
allhooddat <- allhooddat %>% mutate(Site = "Hood_Head")
allmandat <- allmandat %>% mutate(Site = "Manchester")
#add a date column to the two dfs
allcheldat$date <- as.Date(allcheldat$datetime)
allthorndat$date <- as.Date(allthorndat$datetime)
allhooddat$date <- as.Date(allhooddat$datetime)
allmandat$date <- as.Date(allmandat$datetime)
#calculate averages
chelav <- allcheldat %>% group_by(date) %>% summarise(meantemp=mean(Temp_C, na.rm = TRUE), meanDO=mean(DO_mgL, na.rm = TRUE))
thornav <- allthorndat %>% group_by(date) %>% summarise(meantemp=mean(Temp_C, na.rm = TRUE), meanDO=mean(DO_mgL, na.rm = TRUE))
manav <- allmandat %>% group_by(date) %>% summarise(meantemp=mean(Temp_C, na.rm = TRUE), meanDO=mean(DO_mgL, na.rm = TRUE))
hoodav <- allhooddat %>% group_by(date) %>% summarise(meantemp=mean(Temp_C, na.rm = TRUE), meanDO=mean(DO_mgL, na.rm = TRUE))
#Only caclulate the days I want
chelav <- chelav %>% filter(date > "2023-06-05")
thornav <- thornav %>% filter(date > "2023-06-05")
hoodav <- hoodav %>% filter(date > "2023-06-05")
manav <- manav %>% filter(date > "2023-06-05")
#calculate cumulative degree days
chelav$degdays <- cumsum(chelav$meantemp)
thornav$degdays <- cumsum(thornav$meantemp)
#Add site to the average dfs
chelav <- chelav %>% mutate(Site = "Chelsea")
thornav <- thornav %>% mutate(Site = "Thorndyke")
manlav <- manav %>% mutate(Site = "Manchester")
hoodav <- hoodav %>% mutate(Site = "Hood_Head")
#merge the two sites temperature data to plot
alldat <- bind_rows(allcheldat, allthorndat, allmandat, allhooddat)
allavdat <- bind_rows(chelav, thornav, hoodav, manav)
dailyaverages <- alldat
alldat$date <- as.Date(alldat$datetime)
averagetemps <- alldat %>% group_by(date, Site) %>% summarise(meantemp=mean(Temp_C, na.rm = TRUE))
averageDO <- alldat %>% group_by(date, Site) %>% summarise(meanDO=mean(DO_mgL, na.rm = TRUE))
#Plot DO
avergage_DO_plot <- averageDO %>%
filter(date > "2023-06-05") %>% #filter(date < "2023-10-17") %>%
ggplot(aes(x= date , y = meanDO, colour = Site)) + geom_line()+
theme_bw()+ylab("Daily Mean Dissolved Oxygen (mg / L)")+xlab("Date")+
scale_color_manual(values=c("#B3C863","#756A8C","#037D64","#CEB08E"))+
theme(axis.title.y=element_text())+
theme(
text = element_text(size = 14))
# Chunk 5
ggplotly(avergage_DO_plot)
# Chunk 6
averagetemps <- averagetemps %>%
filter(date > "2023-06-05") %>% #filter(date < "2023-10-17") %>%
ggplot(aes(x= date , y = meantemp, colour = Site)) + geom_line()+
theme_bw()+ylab("Daily Mean Temperature (째C)")+xlab("Date")+
scale_color_manual(values=c("#B3C863","#756A8C","#037D64","#CEB08E"))+
theme(text=element_text(),
axis.title.y=element_text())
# Chunk 7
ggplotly(averagetemps)
# Chunk 8
carbchem <- read.csv(here("Data","carbchem.csv"))
#Sumarise the data
#turn this into a loop that will do this for each of the cvs files that I have in the data folder
mandat <- read.csv(here("Data", "man_Do_Temp.csv"))#Read in the data
mandat$datetime <- mdy_hm(mandat$Date.Time..GMT.07.00)
#Obtain daily mean data - this should probably be done in a seperate script and this should be saved for the website only
manav <- mandat %>%
mutate(date = as.Date(date, format = "%Y-%m-%d")) %>%
group_by(date) %>%
summarise(meantemp = mean(Temp_C, na.rm = TRUE),
meanDO = mean(DO_mgL, na.rm = TRUE))
man_temp_plot <- manav %>%
ggplot(aes(x = date, y = meantemp))+geom_line()+xlab("Date")+ylab("Temperature (째C)")+theme_bw()
man_temp_plot
#Obtain daily mean data - this should probably be done in a seperate script and this should be saved for the website only
manav <- mandat %>%
mutate(date = as.Date(date, format = "%Y-%m-%d")) %>%
group_by(date) %>%
summarise(meantemp = mean(Temp_C, na.rm = TRUE),
meanDO = mean(DO_mgL, na.rm = TRUE))
man_temp_plot <- manav %>%
ggplot(aes(x = date, y = meantemp))+geom_line()+xlab("Date")+ylab("Temperature (째C)")+theme_bw()
man_temp_plot
View(manav)
View(mandat)
# Chunk 1
#Load the packages required to make a local scale map
library(tidyverse)
library(leaflet)#package to make interactive web
library(leaflet.providers)#allows you to add third party basemaps
library(here)
library(plotly)
library(lubridate)
# Chunk 2
aquaculturemap_man <- leaflet() %>%
addProviderTiles(providers$Esri.OceanBasemap) %>%
addMarkers(lng = -122.545044,lat = 47.573528, popup = "Clam Bay - NOAA Manchester")
# Chunk 3
aquaculturemap_man
# Chunk 4
#Sumarise the data
#turn this into a loop that will do this for each of the cvs files that I have in the data folder
mandat <- read.csv(here("Data", "man_Do_Temp.csv"))#Read in the data
mandat$datetime <- mdy_hm(mandat$Date.Time..GMT.07.00)
#Obtain daily mean data - this should probably be done in a seperate script and this should be saved for the website only
manav <- mandat %>%
mutate(date = as.Date(date, format = "%Y-%m-%d")) %>%
group_by(date) %>%
summarise(meantemp = mean(Temp_C, na.rm = TRUE),
meanDO = mean(DO_mgL, na.rm = TRUE))
# Chunk 5
man_temp_plot <- manav %>%
ggplot(aes(x = date, y = meantemp))+geom_line()+xlab("Date")+ylab("Temperature (째C)")+theme_bw()
# Chunk 6
ggplotly(man_temp_plot)
# Chunk 7
man_do_plot <- manav %>%
ggplot(aes(x = date, y = meanDO))+geom_line()+xlab("Date")+ylab("Disolved oxygen (mg/L)")+theme_bw()
ggplotly(man_do_plot)
# Chunk 8
ggplotly(man_do_plot)
# Chunk 9
carbchem %>% filter(Site == "Manchester") %>% select(-c(1,2)) %>%  arrange(Year, Month)
str(cheldat)
cheldat %>% filter(datetime > 2023-06-01)
cheldat %>% filter(datetime < 2023-06-01)
cheldat %>% filter(datetime > 2023-06-01)
View(cheldat)
cheldat %>% filter(datetime > 2023-06-01 00:00:00)
cheldat %>% filter(datetime > 2023-06-01)
cheldat %>% filter(datetime > 2023-06-01 | datetime < 2023-10-01)
cheldat %>% filter(datetime >= as.Date("2023-06-01") & datetime <= as.Date("2023-10-01"))
thorndat %>% filter((datetime >= as.Date("2023-06-01") & datetime <= as.Date("2023-10-01")) |
(datetime >= as.Date("2024-06-01") & datetime <= as.Date("2024-10-01")))
mandat %>% filter((datetime >= as.Date("2023-06-01") & datetime <= as.Date("2023-10-01")) |
(datetime >= as.Date("2024-06-01") & datetime <= as.Date("2024-10-01")))
hooddat %>% filter((datetime >= as.Date("2023-06-01") & datetime <= as.Date("2023-10-01")) |
(datetime >= as.Date("2024-06-01") & datetime <= as.Date("2024-10-01")))
thorndat %>% filter((datetime >= as.Date("2023-06-01") & datetime <= as.Date("2023-10-01")) |
(datetime >= as.Date("2024-06-01") & datetime <= as.Date("2024-10-01")))
alldat <- Bind_rows(
(cheldat %>% filter((datetime >= as.Date("2023-06-01") & datetime <= as.Date("2023-10-01")) |
(datetime >= as.Date("2024-06-01") & datetime <= as.Date("2024-10-01"))))
(mandat %>% filter((datetime >= as.Date("2023-06-01") & datetime <= as.Date("2023-10-01")) |
(datetime >= as.Date("2024-06-01") & datetime <= as.Date("2024-10-01"))))
(hooddat %>% filter((datetime >= as.Date("2023-06-01") & datetime <= as.Date("2023-10-01")) |
(datetime >= as.Date("2024-06-01") & datetime <= as.Date("2024-10-01"))))
(thorndat %>% filter((datetime >= as.Date("2023-06-01") & datetime <= as.Date("2023-10-01")) |
(datetime >= as.Date("2024-06-01") & datetime <= as.Date("2024-10-01"))))
)
librart(tidyverse)
library(tidyverse)
##Get the average water temp from June to Spetember ofall sites
alldat <- Bind_rows(
(cheldat %>% filter((datetime >= as.Date("2023-06-01") & datetime <= as.Date("2023-10-01")) |
(datetime >= as.Date("2024-06-01") & datetime <= as.Date("2024-10-01"))))
(mandat %>% filter((datetime >= as.Date("2023-06-01") & datetime <= as.Date("2023-10-01")) |
(datetime >= as.Date("2024-06-01") & datetime <= as.Date("2024-10-01"))))
(hooddat %>% filter((datetime >= as.Date("2023-06-01") & datetime <= as.Date("2023-10-01")) |
(datetime >= as.Date("2024-06-01") & datetime <= as.Date("2024-10-01"))))
(thorndat %>% filter((datetime >= as.Date("2023-06-01") & datetime <= as.Date("2023-10-01")) |
(datetime >= as.Date("2024-06-01") & datetime <= as.Date("2024-10-01"))))
)
##Get the average water temp from June to Spetember ofall sites
alldat <- bind_rows(
(cheldat %>% filter((datetime >= as.Date("2023-06-01") & datetime <= as.Date("2023-10-01")) |
(datetime >= as.Date("2024-06-01") & datetime <= as.Date("2024-10-01"))))
(mandat %>% filter((datetime >= as.Date("2023-06-01") & datetime <= as.Date("2023-10-01")) |
(datetime >= as.Date("2024-06-01") & datetime <= as.Date("2024-10-01"))))
(hooddat %>% filter((datetime >= as.Date("2023-06-01") & datetime <= as.Date("2023-10-01")) |
(datetime >= as.Date("2024-06-01") & datetime <= as.Date("2024-10-01"))))
(thorndat %>% filter((datetime >= as.Date("2023-06-01") & datetime <= as.Date("2023-10-01")) |
(datetime >= as.Date("2024-06-01") & datetime <= as.Date("2024-10-01"))))
)
##Get the average water temp from June to Spetember ofall sites
alldat <- bind_rows(
(cheldat %>% filter((datetime >= as.Date("2023-06-01") & datetime <= as.Date("2023-10-01")) |
(datetime >= as.Date("2024-06-01") & datetime <= as.Date("2024-10-01")))),
(mandat %>% filter((datetime >= as.Date("2023-06-01") & datetime <= as.Date("2023-10-01")) |
(datetime >= as.Date("2024-06-01") & datetime <= as.Date("2024-10-01")))),
(hooddat %>% filter((datetime >= as.Date("2023-06-01") & datetime <= as.Date("2023-10-01")) |
(datetime >= as.Date("2024-06-01") & datetime <= as.Date("2024-10-01")))),
(thorndat %>% filter((datetime >= as.Date("2023-06-01") & datetime <= as.Date("2023-10-01")) |
(datetime >= as.Date("2024-06-01") & datetime <= as.Date("2024-10-01"))))
)
str(alldat)
alldat %>% summarise(mean=meantemp(Temp_C))
alldat %>% summarise(meantemp=mean(Temp_C))
alldat %>% summarise(meantemp=mean(Temp_C, na.rm = TRUE))
thorndat_PSI_low <- read.csv(here("Data", "Chelsea_Low_Bag_Temp_PSI_2023_2024.csv"))#Read in the data
#Obtain daily mean data - this should probably be done in a seperate script and this should be saved for the website only
thorndat$thorndat_PSI_low <- mdy_hm(thorndat_PSI_low$Date.Time..GMT.07.00)
#Obtain daily mean data - this should probably be done in a seperate script and this should be saved for the website only
thorndat$thorndat_PSI_low <- mdy_hm(thorndat_PSI_low$Date.Time..GMT.07.00)
#Obtain daily mean data - this should probably be done in a seperate script and this should be saved for the website only
thorndat_PSI_low$datetime <- mdy_hm(thorndat_PSI_low$Date.Time..GMT.07.00)
#Obtain daily mean data - this should probably be done in a seperate script and this should be saved for the website only
thorndat_PSI_low_dailymeans <- thorndat_PSI_low %>%
mutate(date = as.Date(date, format = "%Y-%m-%d")) %>%
group_by(date) %>%
summarise(meantemp = mean(Temp_C, na.rm = TRUE),
meanDO = mean(DO_mgL, na.rm = TRUE))
str(thorndat_PSI_low)
#Obtain daily mean data - this should probably be done in a seperate script and this should be saved for the website only
thorndat_PSI_low$datetime <- mdy_hm(thorndat_PSI_low$Date.Time..GMT.07.00)
#Obtain daily mean data - this should probably be done in a seperate script and this should be saved for the website only
thorndat_PSI_low_dailymeans <- thorndat_PSI_low %>%
mutate(date = as.Date(date, format = "%Y-%m-%d")) %>%
group_by(date) %>%
summarise(meantemp = mean(Temp_C, na.rm = TRUE),
meanDO = mean(DO_mgL, na.rm = TRUE))
#Obtain daily mean data - this should probably be done in a seperate script and this should be saved for the website only
thorndat_PSI_low_dailymean_temps <- thorndat_PSI_low %>%
mutate(date = as.Date(date, format = "%Y-%m-%d")) %>%
group_by(date) %>%
summarise(meantemp = mean(Temp_C, na.rm = TRUE))
#Obtain daily mean data - this should probably be done in a seperate script and this should be saved for the website only
cheldat_PSI_low$datetime <- mdy_hm(cheldat_PSI_low$Date.Time..GMT.07.00)
cheldat_PSI_low$date <- as.Date(cheldat_PSI_low$datetime)
cheldat_PSI_low <- read.csv(here("Data", "Chelsea_Low_Bag_Temp_PSI_2023_2024.csv"))#Read in the data
#Obtain daily mean data - this should probably be done in a seperate script and this should be saved for the website only
cheldat_PSI_low$datetime <- mdy_hm(cheldat_PSI_low$Date.Time..GMT.07.00)
cheldat_PSI_low$date <- as.Date(cheldat_PSI_low$datetime)
#Obtain daily mean data - this should probably be done in a seperate script and this should be saved for the website only
cheldat_PSI_low_dailymean_temps <- cheldat_PSI_low %>%
mutate(date = as.Date(date, format = "%Y-%m-%d")) %>%
group_by(date) %>%
summarise(meantemp = mean(Temp_C, na.rm = TRUE))
cheldat_PSI_low_dailymean_temps %>%
ggplot(aes(x = date, y = meantemp))+geom_line()+xlab("Date")+ylab("Temperature (째C)")+theme_bw()
cheldat_PSI_high <- read.csv(here("Data", "Chelsea_high_Bag_Temp_PSI_2023_2024.csv"))#Read in the data
cheldat_PSI_high <- read.csv(here("Data", "Chelsea_upper_Bag_Temp_PSI_2023_2024.csv"))#Read in the data
#Obtain daily mean data - this should probably be done in a seperate script and this should be saved for the website only
cheldat_PSI_high$datetime <- mdy_hm(cheldat_PSI_high$Date.Time..GMT.07.00)
cheldat_PSI_high <- read.csv(here("Data", "Chelsea_upper_Bag_Temp_PSI_2023_2024.csv"))#Read in the data
#Obtain daily mean data - this should probably be done in a seperate script and this should be saved for the website only
cheldat_PSI_high$datetime <- mdy_hm(cheldat_PSI_high$Date.Time..GMT.07.00)
str(cheldat_PSI_high)
cheldat_PSI_high$date <- as.Date(cheldat_PSI_high$datetime)
#Obtain daily mean data - this should probably be done in a seperate script and this should be saved for the website only
cheldat_PSI_high_dailymean_temps <- cheldat_PSI_high %>%
mutate(date = as.Date(date, format = "%Y-%m-%d")) %>%
group_by(date) %>%
summarise(meantemp = mean(Temp_C, na.rm = TRUE))
cheldat_PSI_high_dailymean_temps %>%
ggplot(aes(x = date, y = meantemp))+geom_line()+xlab("Date")+ylab("Temperature (째C)")+theme_bw()
View(cheldat_PSI_high)
rm(cheldat_PSI_high)
cheldat_PSI_high <- read.csv(here("Data", "Chelsea_upper
cheldat_PSI_high <- read.csv(here("Data", "Chelsea_upper
#Obtain daily mean data - this should probably be done in a seperate script and this should be saved for the website only
cheldat_PSI_high$datetime <- mdy_hm(cheldat_PSI_high$Date.Time..GMT.07.00)
cheldat_PSI_high <- read.csv(here("Data", "Chelsea_upper_Bag_Temp_PSI_2023_2024.csv"))#Read in the data
#Obtain daily mean data - this should probably be done in a seperate script and this should be saved for the website only
cheldat_PSI_high$datetime <- mdy_hm(cheldat_PSI_high$Date.Time..GMT.07.00)
cheldat_PSI_high$date <- as.Date(cheldat_PSI_high$datetime)
#Obtain daily mean data - this should probably be done in a seperate script and this should be saved for the website only
cheldat_PSI_high$datetime <- mdy_hm(cheldat_PSI_high$Date.Time..GMT.07.00)
View(cheldat_PSI_high)
cheldat_PSI_high <- read.csv(here("Data", "Chelsea_upper_Bag_Temp_PSI_2023_2024.csv"))#Read in the data
#Obtain daily mean data - this should probably be done in a seperate script and this should be saved for the website only
cheldat_PSI_high$datetime <- mdy_hm(cheldat_PSI_high$Date.Time..GMT.07.00)
cheldat_PSI_high$date <- as.Date(cheldat_PSI_high$datetime)
#Obtain daily mean data - this should probably be done in a seperate script and this should be saved for the website only
cheldat_PSI_high_dailymean_temps <- cheldat_PSI_high %>%
mutate(date = as.Date(date, format = "%Y-%m-%d")) %>%
group_by(date) %>%
summarise(meantemp = mean(Temp_C, na.rm = TRUE))
cheldat_PSI_high_dailymean_temps %>%
ggplot(aes(x = date, y = meantemp))+geom_line()+xlab("Date")+ylab("Temperature (째C)")+theme_bw()
tottendatall <- bind_rows(cheldat_PSI_low, cheldat_PSI_high)
str(tottendatall)
tottendatall <- bind_rows(cheldat_PSI_low_dailymean_temps, cheldat_PSI_high_dailymean_temps)
tottenallplot <- tottendatall %>% ggplot(aes(x=date, y = meantemp, colour = Elevation))+geom_line()+xlab("Date")+ylab("Temperature (째C)")+theme_bw()
tottenallplot
str(cheldat_PSI_low_dailymean_temps)
cheldat_PSI_high
str(cheldat_PSI_high)
##PSI chelsea data
cheldat_PSI_low <- read.csv(here("Data", "Chelsea_Low_Bag_Temp_PSI_2023_2024.csv"))#Read in the data
#Obtain daily mean data - this should probably be done in a seperate script and this should be saved for the website only
cheldat_PSI_low$datetime <- mdy_hm(cheldat_PSI_low$Date.Time..GMT.07.00)
cheldat_PSI_low$date <- as.Date(cheldat_PSI_low$datetime)
#Obtain daily mean data - this should probably be done in a seperate script and this should be saved for the website only
cheldat_PSI_low_dailymean_temps <- cheldat_PSI_low %>%
mutate(
date = as.Date(date, format = "%Y-%m-%d"),
elevation = "low"  # Add the elevation column with all values set to "low"
) %>%
group_by(date) %>%
summarise(meantemp = mean(Temp_C, na.rm = TRUE))
cheldat_PSI_low_dailymean_temps %>%
ggplot(aes(x = date, y = meantemp))+geom_line()+xlab("Date")+ylab("Temperature (째C)")+theme_bw()
cheldat_PSI_high <- read.csv(here("Data", "Chelsea_upper_Bag_Temp_PSI_2023_2024.csv"))#Read in the data
#Obtain daily mean data - this should probably be done in a seperate script and this should be saved for the website only
cheldat_PSI_high$datetime <- mdy_hm(cheldat_PSI_high$Date.Time..GMT.07.00)
cheldat_PSI_high$date <- as.Date(cheldat_PSI_high$datetime)
#Obtain daily mean data - this should probably be done in a seperate script and this should be saved for the website only
ccheldat_PSI_high_dailymean_temps <- cheldat_PSI_high %>%
mutate(
date = as.Date(date, format = "%Y-%m-%d"),
elevation = "High"  # Add the elevation column with all values set to "low"
) %>%
group_by(date) %>%
summarise(meantemp = mean(Temp_C, na.rm = TRUE))
#Obtain daily mean data - this should probably be done in a seperate script and this should be saved for the website only
cheldat_PSI_high_dailymean_temps <- cheldat_PSI_high %>%
mutate(
date = as.Date(date, format = "%Y-%m-%d"),
elevation = "High"  # Add the elevation column with all values set to "low"
) %>%
group_by(date) %>%
summarise(meantemp = mean(Temp_C, na.rm = TRUE))
cheldat_PSI_high_dailymean_temps %>%
ggplot(aes(x = date, y = meantemp))+geom_line()+xlab("Date")+ylab("Temperature (째C)")+theme_bw()
tottendatall <- bind_rows(cheldat_PSI_low_dailymean_temps, cheldat_PSI_high_dailymean_temps)
tottenallplot <- tottendatall %>% ggplot(aes(x=date, y = meantemp, colour = Elevation))+geom_line()+xlab("Date")+ylab("Temperature (째C)")+theme_bw()
tottenallplot
str(cheldat_PSI_high_dailymean_temps)
#Obtain daily mean data - this should probably be done in a seperate script and this should be saved for the website only
cheldat_PSI_high_dailymean_temps <- cheldat_PSI_high %>%
mutate(
date = as.Date(date, format = "%Y-%m-%d"),
elevation = "High"  # Add the elevation column with all values set to "low"
) %>%
group_by(date) %>%
summarise(meantemp = mean(Temp_C, na.rm = TRUE))
str(cheldat_PSI_high_dailymean_temps)
#Obtain daily mean data - this should probably be done in a seperate script and this should be saved for the website only
cheldat_PSI_high_dailymean_temps <- cheldat_PSI_high %>%
mutate(
date = as.Date(date, format = "%Y-%m-%d"),
elevation = "High"  # Add the elevation column with all values set to "low"
) %>%
group_by(date) %>%
summarise(meantemp = mean(Temp_C, na.rm = TRUE))
str(cheldat_PSI_high_dailymean_temps)
#Obtain daily mean data - this should probably be done in a seperate script and this should be saved for the website only
cheldat_PSI_low_dailymean_temps <- cheldat_PSI_low %>%
mutate(
date = as.Date(date, format = "%Y-%m-%d"),
elevation = "low"  # Add the elevation column with all values set to "low"
) %>%
group_by(date, elevation) %>%
summarise(meantemp = mean(Temp_C, na.rm = TRUE), .groups = 'drop')
str(cheldat_PSI_low_dailymean_temps)
#Obtain daily mean data - this should probably be done in a seperate script and this should be saved for the website only
heldat_PSI_high_dailymean_temps <- cheldat_PSI_high %>%
mutate(
date = as.Date(date, format = "%Y-%m-%d"),
elevation = "High"  # Set the elevation column with all values to "High"
) %>%
group_by(date, elevation) %>%
summarise(meantemp = mean(Temp_C, na.rm = TRUE), .groups = 'drop')
str(heldat_PSI_high_dailymean_temps)
tottenallplot <- tottendatall %>% ggplot(aes(x=date, y = meantemp, colour = Elevation))+geom_line()+xlab("Date")+ylab("Temperature (째C)")+theme_bw()
tottenallplot
tottendatall <- bind_rows(cheldat_PSI_low_dailymean_temps, cheldat_PSI_high_dailymean_temps)
tottenallplot <- tottendatall %>% ggplot(aes(x=date, y = meantemp, colour = Elevation))+geom_line()+xlab("Date")+ylab("Temperature (째C)")+theme_bw()
tottenallplot
str(heldat_PSI_high_dailymean_temps)
tottenallplot <- tottendatall %>% ggplot(aes(x=date, y = meantemp, colour = elevation))+geom_line()+xlab("Date")+ylab("Temperature (째C)")+theme_bw()
tottenallplot
library(plotly)
##PSI chelsea data
cheldat_PSI_low <- read.csv(here("Data", "Chelsea_Low_Bag_Temp_PSI_2023_2024.csv"))#Read in the data
#Obtain daily mean data - this should probably be done in a seperate script and this should be saved for the website only
cheldat_PSI_low$datetime <- mdy_hm(cheldat_PSI_low$Date.Time..GMT.07.00)
cheldat_PSI_low$date <- as.Date(cheldat_PSI_low$datetime)
#Obtain daily mean data - this should probably be done in a seperate script and this should be saved for the website only
cheldat_PSI_low_dailymean_temps <- cheldat_PSI_low %>%
mutate(
date = as.Date(date, format = "%Y-%m-%d"),
elevation = "low"  # Add the elevation column with all values set to "low"
) %>%
group_by(date, elevation) %>%
summarise(meantemp = mean(Temp_C, na.rm = TRUE), .groups = 'drop')
cheldat_PSI_low_dailymean_temps %>%
ggplot(aes(x = date, y = meantemp))+geom_line()+xlab("Date")+ylab("Temperature (째C)")+theme_bw()
cheldat_PSI_high <- read.csv(here("Data", "Chelsea_upper_Bag_Temp_PSI_2023_2024.csv"))#Read in the data
#Obtain daily mean data - this should probably be done in a seperate script and this should be saved for the website only
cheldat_PSI_high$datetime <- mdy_hm(cheldat_PSI_high$Date.Time..GMT.07.00)
cheldat_PSI_high$date <- as.Date(cheldat_PSI_high$datetime)
#Obtain daily mean data - this should probably be done in a seperate script and this should be saved for the website only
heldat_PSI_high_dailymean_temps <- cheldat_PSI_high %>%
mutate(
date = as.Date(date, format = "%Y-%m-%d"),
elevation = "High"  # Set the elevation column with all values to "High"
) %>%
group_by(date, elevation) %>%
summarise(meantemp = mean(Temp_C, na.rm = TRUE), .groups = 'drop')
#Create an overall graph with everytihg on it
#Stack the data so that there is a low and high
tottendatall <- bind_rows(cheldat_PSI_low_dailymean_temps, cheldat_PSI_high_dailymean_temps)
tottenallplot <- tottendatall %>% ggplot(aes(x=date, y = meantemp, colour = elevation))+geom_line()+xlab("Date")+ylab("Temperature (째C)")+theme_bw()
##PSI chelsea data
cheldat_PSI_low <- read.csv(here("Data", "Chelsea_Low_Bag_Temp_PSI_2023_2024.csv"))#Read in the data
##PSI chelsea data
cheldat_PSI_low <- read.csv(here("Data", "Chelsea_Low_Bag_Temp_PSI_2023_2024.csv"))#Read in the data
#Obtain daily mean data - this should probably be done in a seperate script and this should be saved for the website only
cheldat_PSI_low$datetime <- mdy_hm(cheldat_PSI_low$Date.Time..GMT.07.00)
cheldat_PSI_low$date <- as.Date(cheldat_PSI_low$datetime)
#Obtain daily mean data - this should probably be done in a seperate script and this should be saved for the website only
cheldat_PSI_low_dailymean_temps <- cheldat_PSI_low %>%
mutate(
date = as.Date(date, format = "%Y-%m-%d"),
elevation = "low"  # Add the elevation column with all values set to "low"
) %>%
group_by(date, elevation) %>%
summarise(meantemp = mean(Temp_C, na.rm = TRUE), .groups = 'drop')
cheldat_PSI_low_dailymean_temps %>%
ggplot(aes(x = date, y = meantemp))+geom_line()+xlab("Date")+ylab("Temperature (째C)")+theme_bw()
cheldat_PSI_high <- read.csv(here("Data", "Chelsea_upper_Bag_Temp_PSI_2023_2024.csv"))#Read in the data
#Obtain daily mean data - this should probably be done in a seperate script and this should be saved for the website only
cheldat_PSI_high$datetime <- mdy_hm(cheldat_PSI_high$Date.Time..GMT.07.00)
cheldat_PSI_high$date <- as.Date(cheldat_PSI_high$datetime)
#Obtain daily mean data - this should probably be done in a seperate script and this should be saved for the website only
heldat_PSI_high_dailymean_temps <- cheldat_PSI_high %>%
mutate(
date = as.Date(date, format = "%Y-%m-%d"),
elevation = "High"  # Set the elevation column with all values to "High"
) %>%
group_by(date, elevation) %>%
summarise(meantemp = mean(Temp_C, na.rm = TRUE), .groups = 'drop')
tottendatall <- bind_rows(cheldat_PSI_low_dailymean_temps, cheldat_PSI_high_dailymean_temps)
tottenallplot <- tottendatall %>% ggplot(aes(x=date, y = meantemp, colour = elevation))+geom_line()+xlab("Date")+ylab("Temperature (째C)")+theme_bw()
#Load the packages required to make a local scale map
library(tidyverse)
library(leaflet)#package to make interactive web
library(leaflet.providers)#allows you to add third party basemaps
library(here)
library(plotly)
library(lubridate)
##PSI chelsea data
cheldat_PSI_low <- read.csv(here("Data", "Chelsea_Low_Bag_Temp_PSI_2023_2024.csv"))#Read in the data
#Obtain daily mean data - this should probably be done in a seperate script and this should be saved for the website only
cheldat_PSI_low$datetime <- mdy_hm(cheldat_PSI_low$Date.Time..GMT.07.00)
cheldat_PSI_low$date <- as.Date(cheldat_PSI_low$datetime)
#Obtain daily mean data - this should probably be done in a seperate script and this should be saved for the website only
cheldat_PSI_low_dailymean_temps <- cheldat_PSI_low %>%
mutate(
date = as.Date(date, format = "%Y-%m-%d"),
elevation = "low"  # Add the elevation column with all values set to "low"
) %>%
group_by(date, elevation) %>%
summarise(meantemp = mean(Temp_C, na.rm = TRUE), .groups = 'drop')
#cheldat_PSI_low_dailymean_temps %>%
ggplot(aes(x = date, y = meantemp))+geom_line()+xlab("Date")+ylab("Temperature (째C)")+theme_bw()
##PSI chelsea data
cheldat_PSI_low <- read.csv(here("Data", "Chelsea_Low_Bag_Temp_PSI_2023_2024.csv"))#Read in the data
#Obtain daily mean data - this should probably be done in a seperate script and this should be saved for the website only
cheldat_PSI_low$datetime <- mdy_hm(cheldat_PSI_low$Date.Time..GMT.07.00)
cheldat_PSI_low$date <- as.Date(cheldat_PSI_low$datetime)
#Obtain daily mean data - this should probably be done in a seperate script and this should be saved for the website only
cheldat_PSI_low_dailymean_temps <- cheldat_PSI_low %>%
mutate(
date = as.Date(date, format = "%Y-%m-%d"),
elevation = "low"  # Add the elevation column with all values set to "low"
) %>%
group_by(date, elevation) %>%
summarise(meantemp = mean(Temp_C, na.rm = TRUE), .groups = 'drop')
cheldat_PSI_high <- read.csv(here("Data", "Chelsea_upper_Bag_Temp_PSI_2023_2024.csv"))#Read in the data
#Obtain daily mean data - this should probably be done in a seperate script and this should be saved for the website only
cheldat_PSI_high$datetime <- mdy_hm(cheldat_PSI_high$Date.Time..GMT.07.00)
cheldat_PSI_high$date <- as.Date(cheldat_PSI_high$datetime)
#Obtain daily mean data - this should probably be done in a seperate script and this should be saved for the website only
cheldat_PSI_high_dailymean_temps <- cheldat_PSI_high %>%
mutate(
date = as.Date(date, format = "%Y-%m-%d"),
elevation = "High"  # Set the elevation column with all values to "High"
) %>%
group_by(date, elevation) %>%
summarise(meantemp = mean(Temp_C, na.rm = TRUE), .groups = 'drop')
tottendatall <- bind_rows(cheldat_PSI_low_dailymean_temps, cheldat_PSI_high_dailymean_temps)
tottenallplot <- tottendatall %>% ggplot(aes(x=date, y = meantemp, colour = elevation))+geom_line()+xlab("Date")+ylab("Temperature (째C)")+theme_bw()
ggplotly(tottenallplot)
